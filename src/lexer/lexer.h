#ifndef LEXER_H
#define LEXER_H

#include <stdio.h>

typedef enum {
    ASM_FUNCTION,
    FUNCTION,
    RETURN,
    VAR,
    BRACKETS_OPEN,
    BRACKETS_CLOSE,
    PAREN_OPEN,
    PAREN_CLOSE,
    ARRAY_OPEN,
    ARRAY_CLOSE,
    NUMBER,
    STRING,
    BOOLEAN_VALUE,
    NU,
    KEYWORD,
    SEMICOLON,
    COMMA,
    DECLARE,
    USE,
    NONE,
    MATH_OP,

    TYPE_INT32,
    TYPE_INT24,
    TYPE_INT16,
    TYPE_INT8,
    TYPE_BIT
} LEXER_TOKEN_TYPE;

/**
 * An lexer token generated by the Lexer.
 */
typedef struct {
	LEXER_TOKEN_TYPE type;
	char* value;
} TOKEN;


/**
 * Contains the results of lexical analysis
 */
typedef struct {
    int size;
    TOKEN* tokens;
} LEXER_RESULT;

/**
 * Performs lexical analysis on an input string
 * Returns a LexerResult containing the tokens
 */
LEXER_RESULT runLexer(char* input, int size);

/**
 * Adds a token to the LexerResult
 * @param result The LexerResult to add the token to
 * @param type The type of the token to add
 */
void pushToken(LEXER_RESULT* result, LEXER_TOKEN_TYPE type);

#endif
